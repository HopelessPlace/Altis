#!/usr/bin/env python

import sys

def process_addon(addons_file_list):
    _addons = []

    for load_file in addons_file_list.split(" "):
        with open(load_file, "r") as addons_reader:
            for line in addons_reader:
                addon = line.replace('"', '')  \
                            .replace(';', '')  \
                            .replace(' ', '')  \
                            .replace(',', '')  \
                            .replace('\n', '') \
                            .replace('\r', '') \
                            .replace('\t', '')

                if addon <> '':
                    if addon not in _addons:
                        _addons.append('"%s"' % addon)

    return _addons


#
# load files that already have an item counter inside of them and only need to be patched in here
#
def load_precooked(load_file):
    _text = []
    with open(load_file, "r") as file_reader:
        for line in file_reader:
            _text.append(line)

    return _text


#
# this is the heart of our script: load all vehicle files and recalculate the itemID and the item counter :)
#
def load_and_calculate_itemcount(file_list, first_itemid):
    _text = []
    _items = []
    _item_counter = 0;
    _itemid_counter = int(first_itemid);

    _text.append("//\n")
    _text.append("// XOXODEBUG %s:load_and_calculate_itemcount(%s, %s)\n" % (sys.argv[0], file_list, first_itemid))
    _text.append("//\n")

    for load_file in file_list.split(" "):

        _text.append("""
                //
                // WARNING WARNING WARNING
                //
                // AUTOGENERATED CODE
                //
                // DO NOT MODIFY THIS CODE
                //
                // WARNING WARNING WARNING
                //
                // Begin of parsing "%s"
                //
""" % load_file)

        with open(load_file, "r") as file_reader:
            for line in file_reader:

                #
                # figure out if the beginning of the line is a class item definition
                #
                class_item = line \
                    .replace('\n', '') \
                    .replace('\r', '') \
                    .replace(' ', '') \
                    .replace('\t', '')

                if class_item.startswith("classItem"):
                    _text.append("""
                //
                // The class counter of this item has been autogenerated.
                //
                // DO NOT MODIFY IT. Change the source file (%s) and run the script again!
                //
                class Item%s
""" % (load_file, _item_counter))

                    _item_counter = _item_counter + 1
                else:
                    if class_item.startswith("id="):
                        _text.append("""
                        id=%s;

""" % _itemid_counter);
                        _itemid_counter = _itemid_counter + 1
                    else:
                        _text.append(line)

        _text.append("""
                //
                // WARNING WARNING WARNING
                //
                // AUTOGENERATED CODE
                //
                // DO NOT MODIFY THIS CODE
                //
                // WARNING WARNING WARNING
                //
                // End of parsing "%s"
                //
""" % load_file)

    _text.append("//\n")
    _text.append("// XOXODEBUG %s:load_and_calculate_itemcount(%s, %s)\n" % (sys.argv[0], file_list, first_itemid))
    _text.append("//\n")

    _text.append("""

                //
                // GENERATOR SCRIPT: %s
                //
                // This item counter has been autogenerated from the following files:
                //
                // %s
                //
                // DO NOT MODIFY THIS NUMBER.
                //
                // If you want to add vehicles to this list then change the source files and run the generator again!
                //
                items=%s;

""" % (sys.argv[0], file_list.split(", "), _item_counter))

    return _text

#
# main function
#
# here is where the party happens.
#
if __name__ == "__main__":
    output = []

    addons = process_addon(sys.argv[2])
    addonsauto = process_addon(sys.argv[3])

    classgroups = load_precooked(sys.argv[4])
    classmarkers = load_precooked(sys.argv[5])

    classvehicles = load_and_calculate_itemcount(sys.argv[6], sys.argv[7])

    with open (sys.argv[1], "r") as mission_sqm:
        for line in mission_sqm.readlines():
            output.append(line \
                .replace("%%%ADDONS%%%", ", ".join(sorted(addons))) \
                .replace("%%%ADDONSAUTO%%%", ", ".join(addonsauto)) \
                .replace("%%%CLASSGROUPS%%%", "".join(classgroups)) \
                .replace("%%%CLASSVEHICLES%%%", "".join(classvehicles)) \
                .replace("%%%CLASSMARKERS%%%", "".join(classmarkers)) \
                .rstrip()
            )

    #
    # print the whole output, this is the mission.sqm that your server will use
    #
    for line in output:
        print line

